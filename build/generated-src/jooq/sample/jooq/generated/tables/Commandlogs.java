/*
 * This file is generated by jOOQ.
*/
package jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.CommandlogsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Commandlogs extends TableImpl<CommandlogsRecord> {

    private static final long serialVersionUID = 794947841;

    /**
     * The reference instance of <code>public.commandlogs</code>
     */
    public static final Commandlogs COMMANDLOGS = new Commandlogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommandlogsRecord> getRecordType() {
        return CommandlogsRecord.class;
    }

    /**
     * The column <code>public.commandlogs.id</code>.
     */
    public final TableField<CommandlogsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('commandlogs_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.commandlogs.command</code>.
     */
    public final TableField<CommandlogsRecord, String> COMMAND = createField("command", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.commandlogs.arguments</code>.
     */
    public final TableField<CommandlogsRecord, String> ARGUMENTS = createField("arguments", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.commandlogs.time</code>.
     */
    public final TableField<CommandlogsRecord, Timestamp> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.commandlogs.username</code>.
     */
    public final TableField<CommandlogsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.commandlogs.userid</code>.
     */
    public final TableField<CommandlogsRecord, String> USERID = createField("userid", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.commandlogs.guildname</code>.
     */
    public final TableField<CommandlogsRecord, String> GUILDNAME = createField("guildname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.commandlogs.guildid</code>.
     */
    public final TableField<CommandlogsRecord, String> GUILDID = createField("guildid", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.commandlogs</code> table reference
     */
    public Commandlogs() {
        this("commandlogs", null);
    }

    /**
     * Create an aliased <code>public.commandlogs</code> table reference
     */
    public Commandlogs(String alias) {
        this(alias, COMMANDLOGS);
    }

    private Commandlogs(String alias, Table<CommandlogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Commandlogs(String alias, Table<CommandlogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CommandlogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMANDLOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommandlogsRecord> getPrimaryKey() {
        return Keys.COMMANDLOGS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommandlogsRecord>> getKeys() {
        return Arrays.<UniqueKey<CommandlogsRecord>>asList(Keys.COMMANDLOGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Commandlogs as(String alias) {
        return new Commandlogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Commandlogs rename(String name) {
        return new Commandlogs(name, null);
    }
}
